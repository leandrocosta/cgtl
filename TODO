* Throw exception from dijkstra when there are edges with negative weight;

* Implement bellmanford (single-source shortest path);

* Implement floyd-warshall (all-pairs shortest path);

* Implement negative-weight single-source shortest path;

* Implement algorithms in misc/;

* Implement more exceptions;

* Implement thread-safety (is it really important?);

* Implement structure to be accessed by minspantree iterators;

* Implement multigraph and hypergraph (?): is it realy necessary for now?;
* What should I do when the user tries to insert duplicated vertices or edges? What would STL do?

---

* Implement topological sort;
	- OK.

* Implement structure to be accessed by strongly connected components iterators;
  - OK.

* Implement const_iterators;
	- OK, seems to be working.

* Check if an edge already exist before insert it;
	- OK, seems to be working.

* Implement edge and vertex iterators: get just the vertex's or just the edges's values without take care about the links, the adjacency list, etc.;
	- OK, seems to be working.

* Implement undirected graph: as a type or an attribute to the already existing types;
	- OK.

* Implement depth-first iterator:
	- OK.

* Implement allocator and hash;
  - OK.

* Implement breadth-first iterator;
  - OK.

* Implement dijkstra (single-source shortest path);
  - OK.

* Implement kruskal, prim (minimum spanning tree);
  - OK.

* Implement strongly connected components;
  - OK.
